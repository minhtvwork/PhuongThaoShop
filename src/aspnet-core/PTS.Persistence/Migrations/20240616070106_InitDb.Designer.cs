// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PTS.Data;

#nullable disable

namespace PTS.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240616070106_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeProductDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillEntityId");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPayment")
                        .HasColumnType("bit");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("VoucherEntityId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CardVGAEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThongSo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CardVGA");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CartDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetailEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartEntityId");

                    b.HasIndex("ProductDetailEntityId");

                    b.ToTable("CartDetail");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CartEntity", b =>
                {
                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserEntityId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ColorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeManagePost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CpuEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CPU");
                });

            modelBuilder.Entity("PTS.Domain.Entities.HardDriveEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThongSo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HardDrive");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("LinkImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Ma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductDetailEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ManagePostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManagePost");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ManufacturerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardVGAEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ColorEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CpuEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HardDriveEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RamEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ScreenEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Upgrade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardVGAEntityId");

                    b.HasIndex("ColorEntityId");

                    b.HasIndex("CpuEntityId");

                    b.HasIndex("HardDriveEntityId");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("RamEntityId");

                    b.HasIndex("ScreenEntityId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ProductTypeEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerEntityId");

                    b.HasIndex("ProductTypeEntityId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("PTS.Domain.Entities.RamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThongSo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ram");
                });

            modelBuilder.Entity("PTS.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Description = "Administrator",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1",
                            Description = "Employee",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "1",
                            Description = "Customer",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("PTS.Domain.Entities.ScreenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatLieu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("KichCo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TanSo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Screen");
                });

            modelBuilder.Entity("PTS.Domain.Entities.SeoEntity", b =>
                {
                    b.Property<int>("SeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeoId"));

                    b.Property<string>("CanonicalTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<string>("H1Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoFooter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoId");

                    b.ToTable("SeoEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.SerialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillDetailEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductDetailEntityId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillDetailEntityId");

                    b.HasIndex("ProductDetailEntityId");

                    b.ToTable("Serial");
                });

            modelBuilder.Entity("PTS.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultActionId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTimeChangePass")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTimeLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleEntitiesId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleEntitiesId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "phuongthaoshop.vn",
                            Email = "admin@phuongthaoshop.vn",
                            EmailConfirmed = false,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PHUONGTHAOSHOP.VN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMsjFecv9A9qyXLxhMZRqKjQ7z3bDfsqQZ5itJYNDr7qLjTcp+8SCQZXdB4t3wOJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "phuongthaoshop.vn",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("PTS.Domain.Entities.VoucherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GiaTri")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaVoucher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenVoucher")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PTS.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PTS.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PTS.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PTS.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTS.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PTS.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillDetailEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.BillEntity", "BillEntity")
                        .WithMany("BillDetailEntities")
                        .HasForeignKey("BillEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId");

                    b.HasOne("PTS.Domain.Entities.VoucherEntity", "VoucherEntitity")
                        .WithMany()
                        .HasForeignKey("VoucherEntityId");

                    b.Navigation("UserEntity");

                    b.Navigation("VoucherEntitity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CartDetailEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.CartEntity", "CartEntity")
                        .WithMany("CartDetailEntities")
                        .HasForeignKey("CartEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTS.Domain.Entities.ProductDetailEntity", "ProductDetailEntity")
                        .WithMany("CartDetailEntities")
                        .HasForeignKey("ProductDetailEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartEntity");

                    b.Navigation("ProductDetailEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CartEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.UserEntity", "UserEntity")
                        .WithOne("Cart")
                        .HasForeignKey("PTS.Domain.Entities.CartEntity", "UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductDetailEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.CardVGAEntity", "CardVGAEntity")
                        .WithMany("ProductDetailEntities")
                        .HasForeignKey("CardVGAEntityId");

                    b.HasOne("PTS.Domain.Entities.ColorEntity", "ColorEntity")
                        .WithMany()
                        .HasForeignKey("ColorEntityId");

                    b.HasOne("PTS.Domain.Entities.CpuEntity", "CpuEntity")
                        .WithMany()
                        .HasForeignKey("CpuEntityId");

                    b.HasOne("PTS.Domain.Entities.HardDriveEntity", "HardDriveEntity")
                        .WithMany()
                        .HasForeignKey("HardDriveEntityId");

                    b.HasOne("PTS.Domain.Entities.ProductEntity", "ProductEntity")
                        .WithMany("ProductDetailEntities")
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTS.Domain.Entities.RamEntity", "RamEntity")
                        .WithMany()
                        .HasForeignKey("RamEntityId");

                    b.HasOne("PTS.Domain.Entities.ScreenEntity", "ScreenEntity")
                        .WithMany("ProductDetailEntities")
                        .HasForeignKey("ScreenEntityId");

                    b.Navigation("CardVGAEntity");

                    b.Navigation("ColorEntity");

                    b.Navigation("CpuEntity");

                    b.Navigation("HardDriveEntity");

                    b.Navigation("ProductEntity");

                    b.Navigation("RamEntity");

                    b.Navigation("ScreenEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.ManufacturerEntity", "ManufacturerEntity")
                        .WithMany()
                        .HasForeignKey("ManufacturerEntityId");

                    b.HasOne("PTS.Domain.Entities.ProductTypeEntity", "ProductTypeEntity")
                        .WithMany()
                        .HasForeignKey("ProductTypeEntityId");

                    b.Navigation("ManufacturerEntity");

                    b.Navigation("ProductTypeEntity");
                });

            modelBuilder.Entity("PTS.Domain.Entities.SerialEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.BillDetailEntity", "BillDetailEntities")
                        .WithMany("SerialEntities")
                        .HasForeignKey("BillDetailEntityId");

                    b.HasOne("PTS.Domain.Entities.ProductDetailEntity", "ProductDetailEntities")
                        .WithMany("SerialEntities")
                        .HasForeignKey("ProductDetailEntityId");

                    b.Navigation("BillDetailEntities");

                    b.Navigation("ProductDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("PTS.Domain.Entities.RoleEntity", "RoleEntities")
                        .WithMany()
                        .HasForeignKey("RoleEntitiesId");

                    b.Navigation("RoleEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillDetailEntity", b =>
                {
                    b.Navigation("SerialEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.BillEntity", b =>
                {
                    b.Navigation("BillDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CardVGAEntity", b =>
                {
                    b.Navigation("ProductDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.CartEntity", b =>
                {
                    b.Navigation("CartDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductDetailEntity", b =>
                {
                    b.Navigation("CartDetailEntities");

                    b.Navigation("SerialEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("ProductDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.ScreenEntity", b =>
                {
                    b.Navigation("ProductDetailEntities");
                });

            modelBuilder.Entity("PTS.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
